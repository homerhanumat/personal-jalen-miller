[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "warmup-jalen-miller",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello, I’m Jalen Miller! I’m a current student at Georgetown College graduating in just a few weeks!"
  },
  {
    "objectID": "Articles/index.html",
    "href": "Articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "The articles on this site document the use of JavaScript in various contexts, and serve as examples for students looking to write about JavaScript in the Quarto framework."
  },
  {
    "objectID": "Articles/article_01.html",
    "href": "Articles/article_01.html",
    "title": "warmup-jalen-miller",
    "section": "",
    "text": "We describe a solution, in the JavaScrpt running in the Node environment, to the Day 1 problem of the 2022 edition of the highly-popular Advent of Code challenge.\nThe problem is described in full here. (The reader may need to create an account in order to view it.) A band og eleves is on a quest to provide energy to santa’s reindeer. Their quest begins with a hike through a jungle area. Below is an excerpt from the Advent of Code website that describes the problem.\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nIn the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "Articles/article_01.html#introduction-to-the-problem",
    "href": "Articles/article_01.html#introduction-to-the-problem",
    "title": "warmup-jalen-miller",
    "section": "",
    "text": "We describe a solution, in the JavaScrpt running in the Node environment, to the Day 1 problem of the 2022 edition of the highly-popular Advent of Code challenge.\nThe problem is described in full here. (The reader may need to create an account in order to view it.) A band og eleves is on a quest to provide energy to santa’s reindeer. Their quest begins with a hike through a jungle area. Below is an excerpt from the Advent of Code website that describes the problem.\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nIn the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "Articles/article_01.html#reading-in-the-data",
    "href": "Articles/article_01.html#reading-in-the-data",
    "title": "warmup-jalen-miller",
    "section": "Reading in the Data",
    "text": "Reading in the Data\nSuppose that the problem data is contained in a file called input.txt located in the same dirctory as the JavaScript file, for example:\n\n\ninput.txt\n\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\n\nWe will be importing data from a source outside the Node envionment, so we’ll be working with file-systems. Accordingly, we import the fs and path modules:\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nDetermining the Pathname of the Input File\nWe now use the functionality of the path module to construct a string that gives the pathname of the input.txt file.\nlet targetFile = path.resolve(__dirname, \"input.txt\");\nIn the above code, __dirname evaluates to the full name of the directory containing the file being run, and path.resolve puts it together with the second argument to get the full pathnamename of the input file.\n\n\nReading in the Input File\nNext, we use the fs module tp read in the file, and the we and convert it to a string:\nconst input = fs.readFileSync(targetFile).toString();\n\n\nProcessing the Input File\nWe wish to convert the string into an array of values, where each element of the array is the calorie-value of an item.\nTo this end, we must split the string along the newlines within it. To this end we define a splitting function:\nconst splitLines = str =&gt; str.split(/\\n/);\nNote the use of the Javacript regular expression /\\n/). (In Javascript regular expressions to not start life as strings, as they do in R. Instead they are a special type of object, delimited by the forward-slash: /. For more on regular expressions in JavaScript, see Chapter 8 of the Eloquent JavaScript textbook.)\nWe now apply the function to split the input into an array of strings;\nconst caloriesAsStrings = splitLines(input);\nThe array is full of strings. (Some of them are the empty strinf—wherever there were two consecutive newlines in the oringal input to separate the pack of one elf from the pack of the next elf.)\nWe need to convert them to numbers. To that end, we apply the higher-order array-method map() to the caloriesAsStrings:\nconst calories = caloriesAsStrings.map(str =&gt; parseInt(str));\nIt is important to note that parseInt() converts the empty string to the value NaN: “not a number”."
  },
  {
    "objectID": "Articles/article_01.html#looping-to-compute-pack-totals",
    "href": "Articles/article_01.html#looping-to-compute-pack-totals",
    "title": "warmup-jalen-miller",
    "section": "Looping to Compute Pack-Totals",
    "text": "Looping to Compute Pack-Totals\nThe array calories consists of calorie counts, with NaNs separatng items in different packs. We’ll work with this array to find the sums of the calorie-counts in each pack.\nFirst, we make an array to hold the total calories for each pack:\nconst packTotals = [];\nOne by one, we pull items from the beginning of the calories array, making the pack totals:\nwhile (calories.length &gt; 0) {\n  let packTotal = 0;\n  let currentItem = calories.shift();\n  while (!isNaN(currentItem)) {\n    packTotal += currentItem;\n    currentItem = calories.shift();\n  }\n  packTotals.push(packTotal);\n};\npackTotals is now an array of the total calories in each pack."
  },
  {
    "objectID": "Articles/article_01.html#reporting-the-maximum-pack-total",
    "href": "Articles/article_01.html#reporting-the-maximum-pack-total",
    "title": "warmup-jalen-miller",
    "section": "Reporting the Maximum Pack-Total",
    "text": "Reporting the Maximum Pack-Total\nFinally, we compute the maximum of the pack totals:\nlet maxPackTotal = Math.max(...packTotals);\n(Math.max() takes as arguments all of the numbers of whihc we wish to find the maximum. Note the use of the three-dot notation notation ... to convert the single array into separate arguments. For a review of the three-dot notation, see the section Rest Parameters in Eloquent JavaScript. )\nFinally, we report the maximum to the console:\nconsole.log(maxPackTotal);\nWe are done!"
  },
  {
    "objectID": "Articles/article_01.html#full-code",
    "href": "Articles/article_01.html#full-code",
    "title": "warmup-jalen-miller",
    "section": "Full Code",
    "text": "Full Code\nA complete solution to the problem may be found here, or the reader may view it below:\n\n\nadvent_2022-01.js\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nlet targetFile = path.resolve(__dirname, \"input.txt\");\n\nconst input = fs.readFileSync(targetFile).toString();\n\nconst splitLines = str =&gt; str.split(/\\n/);\nconst caloriesAsStrings = splitLines(input);\n\nconst calories = caloriesAsStrings.map(str =&gt; parseInt(str));\n\nconst packTotals = [];\n\nwhile (calories.length &gt; 0) {\n  let packTotal = 0;\n  let currentItem = calories.shift();\n  while (!isNaN(currentItem)) {\n    packTotal += currentItem;\n    currentItem = calories.shift();\n  }\n  packTotals.push(packTotal);\n}\n\nlet maxPackTotal = Math.max(...packTotals);\nconsole.log(maxPackTotal);"
  },
  {
    "objectID": "Articles/article_02.html",
    "href": "Articles/article_02.html",
    "title": "warmup-jalen-miller",
    "section": "",
    "text": "This article is an application of the Advent of Code 2022 Day 1 solution to the context of the browser.\nTo see it in action, you would create a properly-formatted input file. That is, each line would contain just one number, or would be blank to indicate separation between packs. Save the file somewhere on your computer and then use the input-field below to select it.\n\n\nAfter you select your file, the max pack-total will appear here!\nThe relevant JavaScript file is here. Use the Web Inspector tool on your browser to identify the elements on the html page that are accessed by the code.\nNote: You do not have to implement any of your Eloquent JavaScript solutions in the browser. I wrote this article only to teach myself about reading user-provided files in the browser."
  },
  {
    "objectID": "Articles/Problem1/index.html",
    "href": "Articles/Problem1/index.html",
    "title": "Reversing An Array",
    "section": "",
    "text": "Here is a probelm in which I will reverse an array using JavaScript!\nYou play against the computer. Select a point at which to drop a bomb by clicking in the computer’s area, which is the upper part of the “ocean” shown belw. The bomb explodes, and any ship that is within a set radius of the point of explosion sustains a hit. Each ship has a hit-capacity; when it takes a number of hits equal to its capacity it is sunk.\nThe game is a work in progress (see the Github repository). It is implemented in the browser with the Canvas API.\ngame intended here\n\n\n\n\n    Show shot history:\n  \n    \n      \n      Yours\n    \n  \n    \n      \n      Computer's"
  },
  {
    "objectID": "about.html#early-life",
    "href": "about.html#early-life",
    "title": "About Me",
    "section": "Early Life",
    "text": "Early Life\nI was born and raised in southern Ohio where I was able to fruitfully learn the ways of hard work and success. Through living in a small, tight community, I was able to make small town connections that would lead me to pursue a scholarship at Georgetown College while competeing for the baseball team. I have always had major interest in sports and electronics so playing baseball and being able to ocomplete a minor in computer science has been a dream come true."
  },
  {
    "objectID": "about.html#studies",
    "href": "about.html#studies",
    "title": "About Me",
    "section": "Studies",
    "text": "Studies\nI started out my college career at Morehead State Unviersity where I studied Electronics Engineering. Along with working towards this degree, I competed for the baseball and football teams at MSU. Through some hard thinking and decision making, I found that I wanted to shift my studies to economics with a minor in computer science.\nAfter deciding this was my goal, I transferred to Georgetown College to complete these task. With this being my third year of studying at GC, I have had a phenomenal experience and learned a plethora. My intention is to graduate in December as I have a job lined up in Lexington, Kentucky pertaining to product management."
  },
  {
    "objectID": "about.html#incorporating-computer-science",
    "href": "about.html#incorporating-computer-science",
    "title": "About Me",
    "section": "Incorporating Computer Science",
    "text": "Incorporating Computer Science\nAs I have a job lined up for after I graduate in December, I am currently co-opping with this company now. Through spending all summer and these past few months with this company, I have gotten to see how this type of work plays part in my role as a product manager. As I have dove deep into my role, I now understand the depths of computer science, data science, and data analytics in the safety and security world. My comapny specializes in the safe lock industry (SAL) where we produce the most secure safe lock in the world. To make this happen, there is tons of coding and programming to create these locks to perfection."
  },
  {
    "objectID": "about.html#my-future",
    "href": "about.html#my-future",
    "title": "About Me",
    "section": "My Future",
    "text": "My Future\nLooking down the road, I have many goals I want to accomplish. My main goal however, is that I would love to complete a masters in computer science. This would assist me in the data analytics world immensly. This will be a decision for me in the coming years but I feel it will be important in learning everything I can and being the best data scientist possible."
  },
  {
    "objectID": "articles/Problem1 RevArr/index.html",
    "href": "articles/Problem1 RevArr/index.html",
    "title": "Reversing An Array",
    "section": "",
    "text": "Here is a problem in which I will reverse an array using JavaScript!\nThe original problem ask the student to create a JavaScript code in which will reverse the given array to a new one where everything will be reversed backwards. Through working through this wuestion, I was able to create a nice solution that will do just this.\nTo begin this function, I called a function and named it “reverseArray”. Next, I created an empty array that would store the new components of the reversed array. After this, I created a for loop that would iterate through the array in reverse order. From here, I used an output function to push each element to an output array.\nAfter doing this, I created a new array called, “reverseArrayInPlace”. This new function would overall just reverse each element in place so it wouldn’t have to create a whole new array again. The first for loop in this function finds itself iterating up to the midpoint of the array. Next, the ‘let old’ function stores the current element in a temporary variable. Finally, I was able to switch the current element with its corresponding element from the end and set the corresponding element from the end to the stored value. This finally allowed me to return the modified array when given one.\nWhen giving this function something to work with, it is undoubtly going to reverse the given array and give the correct array back."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Jalen Miller's Website Warmup",
    "section": "",
    "text": "This is a Quarto website for my computer science 324 class. Throughout this website there is a brief biography about me along with two homework problems that I am able to explain. These two problems along with articles about them can be found on the sidebar to the left. Enjoy!\nFeel free to reach out to me with any questions or concerns!\nMy email is: jmiller@georgetowncollege.edu"
  },
  {
    "objectID": "articles/Problem2 Groups/index.html",
    "href": "articles/Problem2 Groups/index.html",
    "title": "Groups",
    "section": "",
    "text": "Here is a problem where I will create a new class called Groups!\nThe original problem as the student to create a class called “Group”. The question asked that this class contains different methods like add and delete. The ultimate goal here was to give the class a static from method that takes an iterable object as argument and creates a group that contains all the values produced by iterating over it.\nTo begin this problem I, created a new group that contained an empty array for storing some elements.\nNext, I incorporated the add method that would allow me to see if there was existence of a value using the ‘has’ method. Since I incorporated the add method, it was only correct to incorporate the delete mmethod next. The delete method removes a specified element from the group by filtering out the array elements that are not equal to the provided value. The final method I added to this function was the ‘has’ method. This last method checks whether the provided value exists in the ‘Group’ instance. It returns ‘true’ if the element is present and ‘false’ if it is not.\nThe last chunck of this code refers to the ‘static from’ method. This is a method that creates a new ‘Group’ instance from an iterable collection. It takes a collection as an argument and adds each value from the collection to the newly created ‘Group’ instance using the ‘add’ method.\nOverall, this class called ‘Group’ will provides a function to manage over a collection of different, unique values. Through different methods within the code, the construction of this allows the code to check and see if there is a presence of certain elements already in the code, of if they need to be added."
  },
  {
    "objectID": "articles/Groups/index.html",
    "href": "articles/Groups/index.html",
    "title": "Groups",
    "section": "",
    "text": "Here is a problem where I will create a new class called Groups!\nThe original problem as the student to create a class called “Group”. The question asked that this class contains different methods like add and delete. The ultimate goal here was to give the class a static from method that takes an iterable object as argument and creates a group that contains all the values produced by iterating over it.\nTo begin this problem I, created a new group that contained an empty array for storing some elements.\nclass Group {\n    constructor(){\n      this.element = [];\n    }\nNext, I incorporated the add method that would allow me to see if there was existence of a value using the ‘has’ method. Since I incorporated the add method, it was only correct to incorporate the delete mmethod next. The delete method removes a specified element from the group by filtering out the array elements that are not equal to the provided value. The final method I added to this function was the ‘has’ method. This last method checks whether the provided value exists in the ‘Group’ instance. It returns ‘true’ if the element is present and ‘false’ if it is not.\nadd(val){\n     if (!this.has(val)) {\n       this.element.push(val);\n     }\n   }\n   delete(val){\n     this.element = this.element.filter(v =&gt; v !== val);\n   }\n   has(val){\n     return this.element.includes(val);\n   }\nThe last chunck of this code refers to the ‘static from’ method. This is a method that creates a new ‘Group’ instance from an iterable collection. It takes a collection as an argument and adds each value from the collection to the newly created ‘Group’ instance using the ‘add’ method.\nstatic from(collection) {\n     let group = new Group;\n     for (let val of collection) {\n       group.add(val);\n     }\n     return group;\n   }\n }\nOverall, this class called ‘Group’ will provides a function to manage over a collection of different, unique values. Through different methods within the code, the construction of this allows the code to check and see if there is a presence of certain elements already in the code, of if they need to be added.\nA few examples of this could be shown here:\nlet group = Group.from([10, 20]);\n console.log(group.has(22));\n console.log(group.has(10));\nThe output of these would be as followed:\nfalse true"
  },
  {
    "objectID": "articles/RevArr/index.html",
    "href": "articles/RevArr/index.html",
    "title": "Reversing An Array",
    "section": "",
    "text": "Here is a problem in which I will reverse an array using JavaScript!\nThe original problem ask the student to create a JavaScript code in which will reverse the given array to a new one where everything will be reversed backwards. Through working through this wuestion, I was able to create a nice solution that will do just this.\nTo begin this function, I called a function and named it “reverseArray”. Next, I created an empty array that would store the new components of the reversed array. After this, I created a for loop that would iterate through the array in reverse order. From here, I used an output function to push each element to an output array.\nfunction reverseArray(Letarray) {\n    let output = [];\n    for (let i = Letarray.length - 1; i &gt;= 0; i--) {\n      output.push(Letarray[i]);}\n    return output;}\nAfter doing this, I created a new array called, “reverseArrayInPlace”. This new function would overall just reverse each element in place so it wouldn’t have to create a whole new array again. The first for loop in this function finds itself iterating up to the midpoint of the array. Next, the ‘let old’ function stores the current element in a temporary variable. Finally, I was able to switch the current element with its corresponding element from the end and set the corresponding element from the end to the stored value. This finally allowed me to return the modified array when given one.\n  function reverseArrayInPlace(Letarray) {\n    for (let i = 0; i &lt; Math.floor(array.length / 2); i++) {\n      let old = Letarray[i];\n      Letarray[i] = Letarray[array.length - 1 - i];\n      Letarray[array.length - 1 - i] = old;}\n    return Letarray;}\nWhen giving this function something to work with, it is undoubtly going to reverse the given array and give the correct array back.\n  console.log(reverseArray([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]));\nThe final output looks like this:\n[ ‘F’, ‘E’, ‘D’, ‘C’, ‘B’, ‘A’ ]"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "The articles on this site document are two different pieces of my work in which I show how I was able to reverse an array and create a class through using the JavaScript language. These articles can be found on the left side of the screen in the sidebar."
  }
]